name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release)') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.23-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race ./...

      - name: Run benchmarks
        run: go test -bench=. -benchmem ./...

      - name: Build for multiple platforms
        run: |
          mkdir -p dist
          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -o dist/logmgr-linux-amd64 ./example
          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -o dist/logmgr-linux-arm64 ./example
          # Windows AMD64
          GOOS=windows GOARCH=amd64 go build -o dist/logmgr-windows-amd64.exe ./example
          # macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -o dist/logmgr-darwin-amd64 ./example
          # macOS ARM64
          GOOS=darwin GOARCH=arm64 go build -o dist/logmgr-darwin-arm64 ./example

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
            conventional-changelog-conventionalcommits@7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag-release:
    name: Tag and Release
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(steps.get_tag.outputs.tag, 'v')
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          body_path: CHANGELOG.md
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 